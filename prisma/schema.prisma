// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Drug {
  id                   Int         @id @default(autoincrement())
  registrationNo       String      @unique // to get data from smart contract
  name                 String
  activeIngredient     String
  dosageForm           String
  consumerMedicineInfo String? // attachment
  drugBatches          DrugBatch[]
  createdAt            DateTime    @default(now()) @map(name: "created_at")
  updatedAt            DateTime    @updatedAt @map(name: "updated_at")
}

model DrugBatch {
  id              Int       @id @default(autoincrement())
  drug            Drug      @relation(fields: [drugId], references: [id])
  drugId          Int
  batchNo         String    @unique // to get data from smart contract
  quantity        Int?
  manufactureDate String // MM/YY
  expiryDate      String // MM/YY
  shipment        Shipment? @relation(fields: [shipmentId], references: [id])
  shipmentId      Int?
  createdAt       DateTime  @default(now()) @map(name: "created_at")
  updatedAt       DateTime  @updatedAt @map(name: "updated_at")
}

model Shipment {
  id          Int            @id @default(autoincrement())
  drugBatches DrugBatch[]
  trackingNo  String         @unique // to get data from smart contract
  status      ShipmentStatus
  // updateAt store in smart contract
}

model Stakeholder {
  id        Int          @id @default(autoincrement())
  name      String       @unique
  phoneNo   String
  email     String       @unique // to get data from smart contract
  address   String
  postcode  String?
  state     String?
  country   String
  role      Role
  status    VerifyStatus @default(PENDING)
  createdAt DateTime     @default(now()) @map(name: "created_at")
  updatedAt DateTime     @updatedAt @map(name: "updated_at")
}

model admin {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @updatedAt @map(name: "updated_at")
}

enum VerifyStatus {
  VERIFIED
  PENDING
  REJECTED
}

enum Role {
  MANUFACTURER
  IMPORTER
  WHOLESALER
}

enum ShipmentStatus {
  OUT_FOR_DELIVERY
  IN_TRANSIT
  ARRIVED_AT_DESTINATION
  DELIVERED
  DELAYED
  HELD_FOR_INSPECTION
  RETURNED_OR_REJECTED
  LOST_OR_DAMAGED
}
